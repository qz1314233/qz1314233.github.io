{"meta":{"title":"乔治的恐龙窝","subtitle":"","description":"","author":"乔治","url":"https://qz1314233.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-03-09T13:37:34.475Z","updated":"2022-03-09T12:51:30.791Z","comments":false,"path":"/404.html","permalink":"https://qz1314233.github.io/404.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-03-10T01:35:01.679Z","updated":"2022-03-09T12:51:30.793Z","comments":true,"path":"links/index.html","permalink":"https://qz1314233.github.io/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-03-09T13:36:15.972Z","updated":"2022-03-09T13:36:15.972Z","comments":false,"path":"about/index.html","permalink":"https://qz1314233.github.io/about/index.html","excerpt":"","text":"个人详细介绍哈哈哈哈哈哈卧槽 太懒了没写"},{"title":"书单","date":"2022-03-10T00:44:20.588Z","updated":"2022-03-09T12:51:30.792Z","comments":false,"path":"books/index.html","permalink":"https://qz1314233.github.io/books/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-03-10T00:47:38.368Z","updated":"2022-03-09T12:51:30.793Z","comments":false,"path":"tags/index.html","permalink":"https://qz1314233.github.io/tags/index.html","excerpt":"","text":""},{"title":"项目仓库","date":"2022-03-10T00:23:53.966Z","updated":"2022-03-10T00:23:53.966Z","comments":false,"path":"repository/index.html","permalink":"https://qz1314233.github.io/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-03-09T12:51:30.793Z","updated":"2022-03-09T12:51:30.793Z","comments":false,"path":"categories/index.html","permalink":"https://qz1314233.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"C#上机五","slug":"c5","date":"2022-05-11T06:06:16.221Z","updated":"2022-05-11T06:08:40.740Z","comments":true,"path":"2022/05/11/c5/","link":"","permalink":"https://qz1314233.github.io/2022/05/11/c5/","excerpt":"","text":"C#上机五 题目一：1、编写C#程序：在D盘根目录下创建一个以自己的学号命名的目录，然后在该目录下创建一个（自己学号.txt）的文本文件，在该文件中写入自己的学号、姓名、学校、专业、英语成绩等信息；然后再读出文件中的信息显示到屏幕上。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;using System.IO;namespace File&#123; public partial class Form1 : Form &#123; public Form1() &#123; InitializeComponent(); &#125; private void Form1_Load(object sender, EventArgs e) &#123; &#125; private void textBox1_TextChanged(object sender, EventArgs e) &#123; &#125; private void label1_Click(object sender, EventArgs e) &#123; &#125; private void label2_Click(object sender, EventArgs e) &#123; &#125; private void label3_Click(object sender, EventArgs e) &#123; &#125; private void label4_Click(object sender, EventArgs e) &#123; &#125; private void groupBox1_Enter(object sender, EventArgs e) &#123; &#125; private void button1_Click(object sender, EventArgs e) &#123; String file = fileName.Text; String Snum = num.Text; String Sname = name.Text; String Sschool = school.Text; String Smajor = major.Text; String Sscore = score.Text; StreamWriter sw=new StreamWriter(@file); sw.WriteLine(Snum); sw.WriteLine(Sname); sw.WriteLine(Sschool); sw.WriteLine(Smajor); sw.WriteLine(Sscore); sw.Close(); &#125; private void button2_Click(object sender, EventArgs e) &#123; String file = fileName.Text; StreamReader rd1 = new StreamReader(@file); String line; String Stext = &quot;&quot;; while((line=rd1.ReadLine())!=null)&#123; Stext = Stext + line + &quot;\\r\\n&quot;; &#125; text.Text = Stext; rd1.Close(); &#125; &#125;&#125; 题目一：2.系统管理界面，在系统管理界面可进行学生注册信息的查询、修改操作。 该系统提供学生的注册、及管理信息管理功能页面可由学生自行设计。要求采用SQL Server数据库，通过编程方式实现。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;using System.Data.SqlClient;namespace login&#123; public partial class form : Form &#123; public form() &#123; InitializeComponent(); &#125; private void groupBox1_Enter(object sender, EventArgs e) &#123; &#125; private void label1_Click(object sender, EventArgs e) &#123; &#125; private void button2_Click(object sender, EventArgs e) &#123; Form2 form2 = new Form2(); //生成一个Form2对象 form2.ShowDialog(); //将Form2窗体显示为模式对话框。 &#125; private void button1_Click(object sender, EventArgs e) &#123; String num = textBox1.Text; String name = textBox6.Text; String pass = textBox2.Text; String repass = textBox3.Text; String school = textBox4.Text; String major = textBox5.Text; if (!pass.Equals(repass)) &#123; label4.Text = &quot;密码不一致&quot;; &#125; else &#123; //数据库连接字串符 string str = @&quot;Data Source=a5c356;Initial Catalog=test;Integrated Security=True&quot;; //创建数据库连接对象 SqlConnection conn = new SqlConnection(str); //打开数据库 conn.Open(); string sql = &quot;insert into studentinfo values(&quot; + &quot;&#x27;&quot; + num + &quot;&#x27;,&quot; + &quot;&#x27;&quot; + name + &quot;&#x27;,&quot; + &quot;&#x27;&quot; + pass + &quot;&#x27;,&quot; + &quot;&#x27;&quot; + school + &quot;&#x27;,&quot; + &quot;&#x27;&quot; + major + &quot;&#x27;&quot; + &quot;)&quot;; SqlCommand cmd = new SqlCommand(sql, conn); //返回数据库对象 if (conn.State == ConnectionState.Open) &#123; label4.Visible = true; label4.Text = &quot;注册成功！&quot;; conn.Close(); Form2 form2 = new Form2(); //生成一个Form2对象 form2.ShowDialog(); //将Form2窗体显示为模式对话框。 this.Hide(); &#125; else &#123; label4.Visible = true; label4.Text = &quot;不能连接到数据库！&quot;; &#125; &#125; &#125; private void label5_Click(object sender, EventArgs e) &#123; &#125; &#125;&#125;窗体二using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;using System.Data.SqlClient;namespace login&#123; public partial class Form2 : Form &#123; public Form2() &#123; InitializeComponent(); &#125; private void button2_Click(object sender, EventArgs e) &#123; textBox1.Text = &quot;&quot;; textBox2.Text = &quot;&quot;; &#125; private void button1_Click(object sender, EventArgs e) &#123; String num = textBox1.Text; String pass = textBox2.Text; //数据库连接字串符 string str = @&quot;Data Source=a5c356;Initial Catalog=test;Integrated Security=True&quot;; //创建数据库连接对象 SqlConnection conn = new SqlConnection(str); //打开数据库 conn.Open(); string sql = &quot;select 密码 from studentinfo where&quot;+&quot; 学号=&quot;+&quot;&#x27;&quot;+num+&quot;&#x27;&quot;; SqlCommand cmd = new SqlCommand(sql, conn); SqlDataReader reader = cmd.ExecuteReader(); while (reader.Read())&#123; //第一种得到列值的方式--通过列号 string Spass = reader[&quot;密码&quot;].ToString(); if (Spass.Equals(pass)) &#123; Form3 form3 = new Form3(); //生成一个Form2对象 form3.ShowDialog(); //将Form2窗体显示为模式对话框。 &#125; else &#123; label4.Visible = true; label4.Text = &quot;学号或密码输入错误&quot;; &#125; &#125; reader.Close(); &#125; &#125;&#125;窗体三using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;using System.Data.SqlClient;namespace login&#123; public partial class Form2 : Form &#123; public Form2() &#123; InitializeComponent(); &#125; private void button2_Click(object sender, EventArgs e) &#123; textBox1.Text = &quot;&quot;; textBox2.Text = &quot;&quot;; &#125; private void button1_Click(object sender, EventArgs e) &#123; String num = textBox1.Text; String pass = textBox2.Text; //数据库连接字串符 string str = @&quot;Data Source=a5c356;Initial Catalog=test;Integrated Security=True&quot;; //创建数据库连接对象 SqlConnection conn = new SqlConnection(str); //打开数据库 conn.Open(); string sql = &quot;select 密码 from studentinfo where&quot;+&quot; 学号=&quot;+&quot;&#x27;&quot;+num+&quot;&#x27;&quot;; SqlCommand cmd = new SqlCommand(sql, conn); SqlDataReader reader = cmd.ExecuteReader(); while (reader.Read())&#123; //第一种得到列值的方式--通过列号 string Spass = reader[&quot;密码&quot;].ToString(); if (Spass.Equals(pass)) &#123; Form3 form3 = new Form3(); //生成一个Form2对象 form3.ShowDialog(); //将Form2窗体显示为模式对话框。 &#125; else &#123; label4.Visible = true; label4.Text = &quot;学号或密码输入错误&quot;; &#125; &#125; reader.Close(); &#125; &#125;&#125;","categories":[{"name":"上机作业","slug":"上机作业","permalink":"https://qz1314233.github.io/categories/%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}],"tags":[{"name":"C#上机作业","slug":"C-上机作业","permalink":"https://qz1314233.github.io/tags/C-%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}]},{"title":"C#上机四","slug":"c4","date":"2022-05-11T06:02:26.401Z","updated":"2022-05-11T06:04:14.316Z","comments":true,"path":"2022/05/11/c4/","link":"","permalink":"https://qz1314233.github.io/2022/05/11/c4/","excerpt":"","text":"C#上机四 题目一：创建一个窗体程序，当程序一开始执行的时候，窗体必须显示在屏幕的正中央，以“测试窗体”为窗体的标题，外观固定且无法改变大小。要求给出运行结果贴图及相关属性的设置情况。 12345678910111213141516171819202122232425using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using System.Windows.Forms;namespace Class_042&#123; static class Program &#123; /// &lt;summary&gt; /// 应用程序的主入口点。 /// &lt;/summary&gt; [STAThread] static void Main() &#123; Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new 测试窗体()); &#125; &#125;&#125; 题目二：模拟书籍销售系统，在一个窗体上设置一个ListBox控件和一个ComboBox控件，一个删除按钮。ComboBox默认存储如下5项图书数据： Java 2程序设计 C#程序设计 C++程序设计 ASP.NET实战 VB.NET实战 可以让用户展开下拉菜单，点击任一项数据，将该数据显示在ListBox列表中。当点击删除按钮时，将删除ListBox列表中已选取的图书。 123456789101112131415161718192021222324252627282930313233343536373839404142using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;namespace Class_046&#123; public partial class Form1 : Form &#123; public Form1() &#123; InitializeComponent(); &#125; private void button1_Click_1(object sender, EventArgs e) &#123; for (int i = listBox1.SelectedItems.Count - 1; i &gt;= 0; i--) &#123; listBox1.Items.Remove(listBox1.SelectedItems[i]); &#125; &#125; private void Form1_Load_1(object sender, EventArgs e) &#123; string[] items = &#123; &quot;java2程序设计&quot;, &quot;C#程序设计&quot;, &quot;C++程序设计&quot;, &quot;ASP.NET实战&quot;, &quot;VB.NET实战&quot; &#125;; comboBox1.Items.AddRange(items); listBox1.SelectionMode = SelectionMode.MultiExtended; &#125; private void comboBox1_SelectedIndexChanged(object sender, EventArgs e) &#123; listBox1.Items.Add(comboBox1.Text); &#125; private void listBox1_SelectedIndexChanged_1(object sender, EventArgs e) &#123; &#125; &#125;&#125; 题目三：创建一个窗体程序，窗体的控件如图1所示，其中水产、佐料是GroupBox控件，提交后选择的内容显示在文本框中；点击重新选择后，清空文本框。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;namespace Class_048&#123; public partial class Form1 : Form &#123; public Form1() &#123; InitializeComponent(); &#125; private void textBox1_TextChanged(object sender, EventArgs e) &#123; &#125; private void Form1_Load(object sender, EventArgs e) &#123; &#125; private void button1_Click(object sender, EventArgs e) &#123; textBox1.Text += &quot;您选择的水产是：&quot;; if (radioButton1.Checked) textBox1.Text += radioButton1.Text + &quot; &quot;; if (radioButton2.Checked) textBox1.Text += radioButton2.Text + &quot; &quot;; if (radioButton3.Checked) textBox1.Text += radioButton3.Text + &quot; &quot;; textBox1.Text += &quot;您选择的佐料是：&quot;; if (checkBox1.Checked) textBox1.Text += checkBox1.Text + &quot; &quot;; if (checkBox2.Checked) textBox1.Text += checkBox2.Text + &quot; &quot;; if (checkBox3.Checked) textBox1.Text += checkBox3.Text + &quot; &quot;; &#125; private void checkBox1_CheckedChanged(object sender, EventArgs e) &#123; &#125; private void button3_Click(object sender, EventArgs e) &#123; textBox1.Text = &quot;&quot;; &#125; private void radioButton1_CheckedChanged(object sender, EventArgs e) &#123; &#125; private void button2_Click(object sender, EventArgs e) &#123; this.Close(); &#125; &#125;&#125; 题目四：设计一个如图2所示的多文档界面，单击菜单中的不同选项，实现子窗体在主窗体中的三种不同排列方式，以及实现关闭窗体的功能。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;namespace Class_049&#123; public partial class Form1 : Form &#123; public Form1() &#123; InitializeComponent(); IsMdiContainer = true; &#125; private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e) &#123; &#125; private void Form1_Load(object sender, EventArgs e) &#123; &#125; private void 加载子窗口ToolStripMenuItem_Click(object sender, EventArgs e) &#123; Formchild formchild = new Formchild(); formchild.MdiParent = this; formchild.Show(); &#125; private void 水平平铺ToolStripMenuItem_Click(object sender, EventArgs e) &#123; this.LayoutMdi(MdiLayout.TileHorizontal); &#125; private void 垂直平铺ToolStripMenuItem_Click(object sender, EventArgs e) &#123; this.LayoutMdi(MdiLayout.TileVertical); &#125; private void 层叠平铺ToolStripMenuItem_Click(object sender, EventArgs e) &#123; this.LayoutMdi(MdiLayout.Cascade); &#125; private void 关闭子窗口ToolStripMenuItem_Click(object sender, EventArgs e) &#123; foreach (Formchild f in this.MdiChildren) &#123; for (int i = 0; i &lt;= this.MdiChildren.Length - 1; i++) &#123; this.MdiChildren[i].Close(); &#125; &#125; &#125; &#125;&#125;子窗口csusing System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;namespace Class_049&#123; public partial class Formchild : Form &#123; public Formchild() &#123; InitializeComponent(); &#125; private void Formchild_Load(object sender, EventArgs e) &#123; &#125; &#125;&#125;","categories":[{"name":"上机作业","slug":"上机作业","permalink":"https://qz1314233.github.io/categories/%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}],"tags":[{"name":"C#上机作业","slug":"C-上机作业","permalink":"https://qz1314233.github.io/tags/C-%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}]},{"title":"C#上机二","slug":"c3","date":"2022-05-11T05:59:24.670Z","updated":"2022-05-11T06:02:05.970Z","comments":true,"path":"2022/05/11/c3/","link":"","permalink":"https://qz1314233.github.io/2022/05/11/c3/","excerpt":"","text":"C#上机二 题目一：编程求s=1-2+3-4+…+99-100的和。 123456789101112131415161718192021222324using System;namespace Class_021&#123; class Program &#123; static void Main(string[] args) &#123; int sum = 0; for (int i = 0; i &lt;= 100; i++) &#123; if (i % 2 != 0) sum += i; else sum -= i; &#125; Console.WriteLine(sum); &#125; &#125;&#125; 题目二：试编程，利用下列公式计算π的值。 pi/4=1-1/3+1/5-1/7+…+1/(4n-3)-1/(4n-1) (n=200) 123456789101112131415161718192021222324using System;namespace Class_022&#123; class Program &#123; static void Main(string[] args) &#123; double sum = 1; for (double i = 1; i &lt;= 200; i++) &#123; if (i % 2 != 0) sum -= 1 / (4 * i - 1); else sum += 1 / (4 * i - 1); &#125; Console.WriteLine(4 * sum); &#125; &#125;&#125; 题目三：要求：打印的行数、列数由用户通过键盘输入。 ****** ****** ****** ****** 1234567891011121314151617181920212223242526272829303132333435using System;namespace Class_014&#123; class Program &#123; static void Main(string[] args) &#123; int n = Convert.ToInt32(Console.ReadLine()); int m = Convert.ToInt32(Console.ReadLine()); for (int i = 1; i &lt;= n; i++) &#123; for (int k = 1; k &lt;= i - 1; k++) &#123; Console.Write(&quot; &quot;); &#125; for (int k = 1; k &lt;= m; k++) &#123; Console.Write(&quot;*&quot;); &#125; Console.Write(&quot; &quot;); for (int k = 1; k &lt;= n - i; k++) &#123; Console.Write(&quot; &quot;); &#125; for (int k = 1; k &lt;= m; k++) &#123; Console.Write(&quot;*&quot;); &#125; Console.WriteLine(); &#125; &#125; &#125;&#125; 题目四：编写控制台应用程序，用两个一维数组存放5个学生的学号和姓名进行排序，并输出排序后的结果。 12345678910111213141516171819202122232425262728293031323334353637383940414243using System;namespace Class_024&#123; class Program &#123; static void Main(string[] args) &#123; int temp; String flag; int[] a = &#123; 2, 3, 4, 1, 5 &#125;; String[] b = &#123; &quot;Morty&quot;, &quot;Summer&quot;, &quot;Smith&quot;, &quot;Rick&quot;, &quot;Jerry&quot; &#125;; for (int i = 0; i &lt; a.Length; i++) &#123; for (int j = 1; j &lt; a.Length - i; j++) &#123; if (a[j + i] &lt; a[i]) &#123; temp = a[i]; a[i] = a[j + i]; a[j + i] = temp; flag = b[i]; b[i] = b[j + i]; b[j + i] = flag; &#125; &#125; &#125; Console.Write(a[0]); for (int i = 1; i &lt; a.Length; i++) &#123; Console.Write(&quot;,&quot; + a[i]); &#125; Console.WriteLine(); Console.Write(b[0]); for (int i = 1; i &lt; b.Length; i++) &#123; Console.Write(&quot;,&quot; + b[i]); &#125; &#125; &#125;&#125;","categories":[{"name":"上机作业","slug":"上机作业","permalink":"https://qz1314233.github.io/categories/%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}],"tags":[{"name":"C#上机作业","slug":"C-上机作业","permalink":"https://qz1314233.github.io/tags/C-%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}]},{"title":"C#上机一","slug":"c2","date":"2022-05-11T05:56:24.925Z","updated":"2022-05-11T05:59:14.108Z","comments":true,"path":"2022/05/11/c2/","link":"","permalink":"https://qz1314233.github.io/2022/05/11/c2/","excerpt":"","text":"C#上机一 题目一：分别控制台SDK方式及集成开发IDE方式编写C#程序，显示输出字符串“这是我的第一个C#程序。”。 12345678910111213141516using System;namespace Class_011&#123; class Program &#123; static void Main(string[] args) &#123; Console.WriteLine( &quot;这是我的第一个C#程序。&quot;); Console.ReadKey(); &#125; &#125;&#125; 题目二：分别按int,long,float,double类型定义两个变量并赋初值，并计算同类型变量的和、差、积、商，最后输出相应的运算结果。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465using System;namespace Class_012 &#123; class Program &#123; static void Main(string[] args) &#123; int a, b, s, u, m, q; long c, d, z, x, n, l; float e, f, g, h, i, j; double k, o, p, r, v, t; a = 2; b = 1; s = a + b; u = a - b; m = a * b; q = a / b; Console.WriteLine(&quot;int型：&quot;); Console.WriteLine(&quot;a + b =&quot; + s); Console.WriteLine(&quot;a - b =&quot; + u); Console.WriteLine(&quot;a * b =&quot; + m); Console.WriteLine(&quot;a / b =&quot; + q); Console.WriteLine(); c = 20; d = 12; z = c + d; x = c - d; n = c * d; l = c / d; Console.WriteLine(&quot;long型：&quot;); Console.WriteLine(&quot;c + d =&quot; + z); Console.WriteLine(&quot;c - d =&quot; + x); Console.WriteLine(&quot;c * d =&quot; + n); Console.WriteLine(&quot;c / d =&quot; + l); Console.WriteLine(&quot; &quot;); e = 2.2F; f = 1.1F; g = e + f; h = e - f; i = e * f; j = e / f; Console.WriteLine(&quot;float型：&quot;); Console.WriteLine(&quot;e + f =&quot; + g); Console.WriteLine(&quot;e - f =&quot; + h); Console.WriteLine(&quot;e * f =&quot; + i); Console.WriteLine(&quot;e / f =&quot; + j); Console.WriteLine(); k = 3.22; o = 1.88; p = k + o; r = k - o; v = k * o; t = k / o; Console.WriteLine(&quot;double型：&quot;); Console.WriteLine(&quot;k + o =&quot; + p); Console.WriteLine(&quot;k - o =&quot; + r); Console.WriteLine(&quot;k * o =&quot; + v); Console.WriteLine(&quot;k / o =&quot; + t); Console.ReadKey(); &#125; &#125;&#125; 题目三：试编程，从键盘任意输入两个整数分别赋值给a和b，并比较两个数的大小，按从小到大的顺序输出两个数。 1234567891011121314151617181920212223242526272829303132using System;namespace Class_013&#123; class Program &#123; static void Main(string[] args) &#123; Console.WriteLine(&quot;请输入a的值：&quot;); string a = Console.ReadLine(); int aa = Convert.ToInt32(a); //输入a Console.WriteLine(&quot;请输入b的值：&quot;); string b = Console.ReadLine(); int bb = Convert.ToInt32(b); //输入b Console.WriteLine(&quot;接下来比较a和b的值&quot;); Console.WriteLine(&quot;从小到大为：&quot;); if (aa &lt; bb) &#123; Console.WriteLine(aa); Console.WriteLine(bb); &#125; if (aa &gt; bb) &#123; Console.WriteLine(bb); Console.WriteLine(aa); &#125; Console.ReadKey(); &#125; &#125;&#125; 题目四：试编程，从键盘任意输入一个整数给变量x，计算并输出分段函数y的值： 2x+1 x≥1 y= 3x/(x-1) x&lt;1 1234567891011121314151617181920212223using System;namespace Class_014&#123; class Program &#123; static void Main(string[] args) &#123; Console.WriteLine(&quot;请输入x的值：&quot;); string xx = Console.ReadLine(); int x = Convert.ToInt32(xx); //输入x int y; if (x &lt; 1) y = 3 * x / (x - 1); else y = 2 * x + 1; Console.WriteLine(&quot;y的值为：&quot; + y); Console.ReadKey(); &#125; &#125;&#125;","categories":[{"name":"上机作业","slug":"上机作业","permalink":"https://qz1314233.github.io/categories/%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}],"tags":[{"name":"C#上机作业","slug":"C-上机作业","permalink":"https://qz1314233.github.io/tags/C-%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}]},{"title":"C#上机三","slug":"c1","date":"2022-04-08T04:28:21.645Z","updated":"2022-04-08T04:34:35.204Z","comments":true,"path":"2022/04/08/c1/","link":"","permalink":"https://qz1314233.github.io/2022/04/08/c1/","excerpt":"","text":"C#上机三 1．请定义一个交通工具(Vehicle)的类，其中有: ⦁ 属性：速度(speed)，体积(size); ⦁ 方法：移动(move())，设置速度(setSpeed(int speed))，设置体积（setSize(int size)）加速speedUp(),减速speedDown(); 在测试类Vehicle中的main()中实例化一个交通工具对象，通过方法给它初始化speed,size的值，并打印出来。另外，调用加速，减速的方法对速度进行改变。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/*1．请定义一个交通工具(Vehicle)的类，其中有: ⦁ 属性：速度(speed)，体积(size);⦁ 方法：移动(move())，设置速度(setSpeed(int speed))，设置体积（setSize(int size)）加速speedUp(),减速speedDown();在测试类Vehicle中的main()中实例化一个交通工具对象，通过方法给它初始化speed,size的值，并打印出来。另外，调用加速，减速的方法对速度进行改变。*/namespace Suke.day07&#123; internal class VehicleTest &#123; static void Main(string[] args) &#123; Vehicle vehicle = new Vehicle(4,5); vehicle.printVehicle(); vehicle.move(); vehicle.speedUp(); vehicle.speedDown(); Console.ReadKey(); &#125; &#125; public class Vehicle &#123; public int size; public int speed; public Vehicle() &#123; &#125; public Vehicle(int size, int speed) &#123; this.size = size; this.speed = speed; &#125; public void setSize(int size) &#123; &#125; public int getSize() &#123; return size; &#125; public void setSpeed(int speed) &#123; &#125; public int getSpeed() &#123; return speed; &#125; public void move() //构造方法move &#123; Console.WriteLine(&quot;前方请注意！体积为&#123;0&#125;公斤的大黄蜂正在以速度&#123;1&#125;公里/秒向目标移动！&quot;, size, speed); &#125; public void speedUp() //构造方法speedUp &#123; Console.WriteLine(&quot;加速加速加速+&#123;0&#125;+&#123;1&#125;+.+.+.+..&quot;, ++size, ++size); &#125; public void speedDown() //构造方法speedDown &#123; Console.WriteLine(&quot;减速减速减速-&#123;0&#125;-&#123;1&#125;-.-.-.-..&quot;, --size, --size); &#125; public void printVehicle() //打印输出Vehicle类 &#123; Console.WriteLine(&quot;Szie: &#123;0&#125;\\nSpeed: &#123;1&#125;&quot;, size, speed); &#125; &#125;&#125; 2．试编写一个函数compute(int a,int b,int sum,int sub,int mul,int quo )，其中sum、sub、mul、quo分别是a，b的和、差、积、商。并编写主函数测试上述函数。提示：和、差、积、商分别采用ref和out形参两种方式实现。 1234567891011121314151617181920212223242526272829303132333435363738394041424344using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/*2．试编写一个函数compute(int a,int b,int sum,int sub,int mul,int quo )， * 其中sum、sub、mul、quo分别是a，b的和、差、积、商。 * 并编写主函数测试上述函数。提示：和、差、积、商分别采用ref和out形参两种方式实现。*/namespace Suke.day07&#123; internal class MathTest &#123; static void Main(string[] args) &#123; int a = 2; int b = 4; int sum = SumValue(2, ref b); int sub = SubValue(2, out b); int mul = MulValue(ref a, 4); int quo = QuoValue(out a, 4); Console.WriteLine(&quot;和=&#123;0&#125;\\n差=&#123;1&#125;\\n积=&#123;2&#125;\\n商=&#123;3&#125;&quot;,sum,sub,mul,quo); Console.ReadKey(); &#125; public static int SumValue(int a, ref int b) //和sum，传参b &#123; return a + b; &#125; public static int SubValue(int a, out int b) //差sub，输出b=2 &#123; b = 2; return a - b; &#125; public static int MulValue(ref int a,int b) //积mul，传参a &#123; return a * b; &#125; public static int QuoValue(out int a,int b) //商quo，输出a=4 &#123; a = 4; return a / b; &#125; &#125;&#125; 3．定义一个接口，它含有两个方法：一个方法用于实现两个数中求最小的数，一个方法用于实现在2个数中求最大的数。定义一个类实现这个接口，再定义派生类中，给出方法Max()、方法Min()的实现； 试在主函数中通过委托MyDelegate的对象md来分别调用上述两个方法Max、Min求一个一维数组的最大值及最小值。 【来源：https://python.iitter.com/other/384020.html，转载请注明】 12345678910111213141516171819202122232425262728293031323334353637383940414243444546using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/*3．定义一个接口，它含有两个方法：一个方法用于实现两个数中求最小的数， * 一个方法用于实现在2个数中求最大的数。定义一个类实现这个接口， * 再定义派生类中，给出方法Max()、方法Min()的实现； * 试在主函数中通过委托MyDelegate的对象md来分别调用上述两个方法Max、Min求一个一维数组的最大值及最小值。*/namespace Suke.day07&#123; internal class DelegateTest &#123; static void Main(string[] args) &#123; MyClass mc = new MyClass(); MyDelegate md1 = new MyDelegate(mc.Max); MyDelegate md2 = new MyDelegate(mc.Min); Console.WriteLine(&quot;最大值=&#123;0&#125;\\n最小值=&#123;1&#125;&quot;, md1(2, 4), md2(2, 4)); Console.ReadKey(); &#125; &#125; public delegate int MyDelegate(int a, int b);//声明委托 public class MyClass : MyVirtual //重写接口构造方法 &#123; public int Max(int a, int b) &#123; if (a &gt; b) return a; else return b; &#125; public int Min(int a, int b) &#123; if (a &lt; b) return a; else return b; &#125; &#125; public interface MyVirtual //定义接口 &#123; int Max(int a, int b); int Min(int a, int b); &#125;&#125; 定义一个抽象的&quot;Role&quot;类，有用户名，密码，权限等成员变量 （1）要求尽可能隐藏所有变量，再通过属性对各变量进行读写。再定义一个具有抽象的play()方法， 该方法只输出用户名，不返回任何值，同时至少定义两个构造方法。 （2）从Role类派生出一个&quot;Student&quot;类，该类具有Role类的所有成员（构造方法除外），并扩展number成员变量，同时增加一个静态成员变量“telephone”。 同样要有至少两个构造方法，并定义覆盖play()方法。 （3）在Main()方法中生成Student的对象,并测试这些对象的方法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/*4. 定义一个抽象的&quot;Role&quot;类，有用户名，密码，权限等成员变量（1）要求尽可能隐藏所有变量，再通过属性对各变量进行读写。再定义一个具有抽象的play()方法，该方法只输出用户名，不返回任何值，同时至少定义两个构造方法。（2）从Role类派生出一个&quot;Student&quot;类，该类具有Role类的所有成员（构造方法除外），并扩展number成员变量，同时增加一个静态成员变量“telephone”。同样要有至少两个构造方法，并定义覆盖play()方法。（3）在Main()方法中生成Student的对象,并测试这些对象的方法。*/namespace Suke.day07&#123; internal class RoleTest &#123; static void Main(string[] args) &#123; Student student = new Student(&quot;圣仙&quot;,192001,true,35226); student.printRole(); student.printStudent(); student.play(); student.study(); student.eat(); Console.ReadKey(); &#125; &#125; public class Student : Role //继承父类Role &#123; private int number; public Student()&#123;&#125; public Student(Role role,int number) &#123; Role = role; this.number = number; &#125; public Student(string name, int password, bool power, int number) &#123; Name = name; Password = password; Power = power; this.number = number; &#125; public Role Role &#123; get; set; &#125; public int Number &#123; get; set; &#125; public override void play() //重写构造方法 &#123; Console.WriteLine(&quot;执行play()方法: 学生用户已登录&quot;); &#125; public void study() &#123; Console.WriteLine(&quot;执行study()方法: 好好学习，天天向上&quot;); &#125; public void eat() &#123; Console.WriteLine(&quot;执行eat()方法: 吃饱再学习&quot;); &#125; public void printStudent() //打印输出Student类 &#123; Console.WriteLine(&quot;执行printStudent()方法: Name=&#123;0&#125;,PassWord=&#123;1&#125;,Power=&#123;2&#125;,Number=&#123;3&#125;&quot;, Name,Password,Power,number); &#125; &#125; public abstract class Role //定义抽象类 &#123; private string name; //用户名 private int password; //密码 private bool power; //权限 public Role() &#123; &#125; public Role(string name, int password, bool power) &#123; this.name = name; this.password = password; this.power = power; &#125; public string Name &#123; get; set; &#125; public int Password &#123; get; set; &#125; public bool Power &#123; get; set; &#125; public abstract void play(); //抽象构造方法 public void printRole() //打印输出Role类 &#123; Console.WriteLine(&quot;执行printRole()方法: Name=&#123;0&#125;,PassWord=&#123;1&#125;,Power=&#123;2&#125;&quot;, name, password, power); &#125; &#125;&#125; 5．创建C#控制台应用程序，建立一个点类CzPoint，为其定义两个double类型的私有字段成员x和y，分别表示点的横坐标和纵坐标；对CzPoint类进行相等和不等操作符重载。注：两个坐标点相等，则指它们的横坐标和纵坐标都相等。 在Main()方法中对两个坐标点是否相同进行测试。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;/*5．创建C#控制台应用程序，建立一个点类CzPoint，为其定义两个double类型的私有字段成员x和y， * 分别表示点的横坐标和纵坐标；对CzPoint类进行相等和不等操作符重载。 * 注：两个坐标点相等，则指它们的横坐标和纵坐标都相等。 * 在Main()方法中对两个坐标点是否相同进行测试。*/namespace Suke.day07&#123; internal class CzPointTest &#123; static void Main(string[] args) &#123; CzPoint p1 = new CzPoint(3, 4); CzPoint p2 = new CzPoint(5, 4); string equal = null; equal = (p1 == p2 ? &quot;相等&quot; : &quot;不相等&quot;); System.Console.WriteLine(&quot;移动前p1和p2&quot; + equal); p1.Move(2, 0); equal = (p1 == p2 ? &quot;相等&quot; : &quot;不相等&quot;); System.Console.WriteLine(&quot;移动后p1和p2&quot; + equal); Console.ReadKey(); &#125; &#125; class CzPoint &#123; private double x; //横坐标 private double y; //纵坐标 public CzPoint(double x, double y) &#123; this.x = x; this.y = y; &#125; public double X &#123; get;set; &#125; public double Y &#123; get; set; &#125; public void Move(double dx, double dy) &#123; x += dx; y += dy; &#125; public static bool operator ==(CzPoint p1, CzPoint p2) &#123; if (p1.x == p2.x &amp;&amp; p1.y == p2.y) &#123; return true; &#125; return false; &#125; public static bool operator !=(CzPoint p1, CzPoint p2) &#123; if (p1.x == p2.x &amp;&amp; p1.y == p2.y) &#123; return false; &#125; return true; &#125; &#125;&#125;","categories":[{"name":"上机作业","slug":"上机作业","permalink":"https://qz1314233.github.io/categories/%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}],"tags":[{"name":"C#上机作业","slug":"C-上机作业","permalink":"https://qz1314233.github.io/tags/C-%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"}]},{"title":"Java的包机制、JavaDoc命令、用户交互Scanner","slug":"笔记3","date":"2022-03-14T00:03:51.268Z","updated":"2022-03-14T00:07:30.171Z","comments":true,"path":"2022/03/14/笔记3/","link":"","permalink":"https://qz1314233.github.io/2022/03/14/%E7%AC%94%E8%AE%B03/","excerpt":"","text":"包机制 包的本质，就是文件夹 一般用公司域名倒置作为包名 &quot;*&quot;通配符，可导入包中所有类 JavaDoc JavaDoc命令是用来生成自己的API文档的 参数信息 @author：作者名 @version：版本号 @since：jdk版本 @param：参数 @return：返回值 @throws：异常 用cmd命令生成或用IDEA生成javadoc文档 用户交互：Scanner 通过Scanner类来获取用户的输入 123Scanner sc = new Scanner(System.in);//创建一个Scanner对象，启动输入...sc.close();//关闭，释放资源 两种接收方式：next()、nextLine() next(): 空格分隔，一个一个扫描** 一定要读取到有效字符后才可以结束输入 对输入有效字符之前的空白，next()方法会自动将其去掉 只有输入有效字符后才会将后面的空白作为分隔符或结束符 next()不能得到带有空格的字符串 nextLine(): 回车键分隔，一行一行扫描 以Enter键分隔，即nextLine()返回的是输入回车键之前所有的字符 可以获得带空格的字符串 12sc.next();//获取输入，空格分隔sc.nextLine();//获取输入，Enter分隔 数值操作 1234//Scanner里面的一些方法：nextInt();nextFloat();... 在IDEA的左下角点击Structure可以查看类的结构，一般用来查看源码里的方法","categories":[{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"包机制、","slug":"包机制、","permalink":"https://qz1314233.github.io/tags/%E5%8C%85%E6%9C%BA%E5%88%B6%E3%80%81/"},{"name":"JavaDoc","slug":"JavaDoc","permalink":"https://qz1314233.github.io/tags/JavaDoc/"},{"name":"Scanner","slug":"Scanner","permalink":"https://qz1314233.github.io/tags/Scanner/"}]},{"title":"Java运算符","slug":"笔记2","date":"2022-03-11T04:23:42.968Z","updated":"2022-03-11T04:27:13.191Z","comments":true,"path":"2022/03/11/笔记2/","link":"","permalink":"https://qz1314233.github.io/2022/03/11/%E7%AC%94%E8%AE%B02/","excerpt":"","text":"运算符 二元运算符 四则运算 +、-、*、/ 除法可能出现浮点数，需要先转换为double 不同数值类型进行运算时，有double结果为double，否则有long结果为long，否则结果都为int 关系运算 &gt;,&lt;,==,!=…(返回结果是布尔值true或false) 模运算 % 即求余运算 一元运算符 ++，–自增，自减 a++ 先操作，再自增 ++a 先自增，再操作 工具类Math类中的pow幂运算 逻辑运算符 与（&amp;）、 或（|）、 非(!) 短路运算 短路与（&amp;&amp;）：若前面布尔值为假，则直接返回false，不进行后面的操作 短路或（||）：若前面布尔值为真，则直接返回true，不进行后面的操作 用短路运算能 减少不必要的运算过程 位运算 &amp;|~(为异或位运算，不同为1，相同为0) &lt;&lt;相当于*2，&gt;&gt;相当于/2, 位运算效率极高！ 字符串拼接符 + 当&quot;+&quot;左右有一个为String类型时，另一个也会转换为String类型进行拼接 三目运算符 x ？y：z 若x为真，则返回y，否则返回z –&gt; x==true ？ –&gt; y（是的）：z（不是）","categories":[{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"运算符","slug":"运算符","permalink":"https://qz1314233.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"}]},{"title":"动态规划·算法","slug":"算法1","date":"2022-03-10T15:54:19.589Z","updated":"2022-03-10T15:54:13.761Z","comments":true,"path":"2022/03/10/算法1/","link":"","permalink":"https://qz1314233.github.io/2022/03/10/%E7%AE%97%E6%B3%951/","excerpt":"","text":"动态规划 N阶矩阵连乘问题 规模为1时，不用运算，初始状态,乘法次数为0&gt;第一个阶段:依据初始状态,计算2个矩阵相乘的最少乘法次数,做出决策。 第二个阶段:依据第一阶段计算的结果计算3个矩阵相乘的最少乘法次数,做决策。 以此类推,直到最后一个阶段得到n个矩阵连乘最少计算次数，做决策。 动态规划的基本思想 (1）经分解得到的各个子问题往往不是相互独立的。&gt;比如:A:AzA3与AzA3A4有共同的子问题A2A3 (2)在求解过程中,将已解决的子问题的最优值进行保存，在需要时可以轻松找出。 (3）通常采用表的形式记录子问题的最优值,即在实际求解过程中，一旦某个子问题被计算过，不管该问题以后是否用得到，都将其计算结果填入该表，需要的时候就从表中找出该子问题的最优值。 (4）根据最优值,记录最优决策,构造最优解。 动态规划的解题步骤 (1）分析最优解的性质,刻画最优解的结构特征——考察是否适合采用动态规划法。 (2）递归定义最优值（即建立递归式或动态规划方程）。 (3）以自底向上的方式计算出最优值,并记录相关信息。 问题 最长公共子序列问题","categories":[{"name":"乔治的Java笔记","slug":"乔治的Java笔记","permalink":"https://qz1314233.github.io/categories/%E4%B9%94%E6%B2%BB%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://qz1314233.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://qz1314233.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"Java的数据类型要点","slug":"每日java2","date":"2022-03-10T15:53:23.058Z","updated":"2022-03-10T15:53:19.631Z","comments":true,"path":"2022/03/10/每日java2/","link":"","permalink":"https://qz1314233.github.io/2022/03/10/%E6%AF%8F%E6%97%A5java2/","excerpt":"","text":"类型转换 强制转换：高到低 （类型）变量名 自动转换：低到高 注意点： 不能对boolean类型进行转换 不能把对象转换为不相干的类型 高容量到低容量，要强制转换 强制转换可能会出现内存溢出或精度问题 JDK7: 可以在数字间加“_”把数位较多的数分隔开 变量 三种作用域 类变量：从属于类，加上static关键字，可以直接使用 实例变量：从属于对象，如果不进行初始化，则会使用默认值 0，0.0，false，null； 局部变量：作用域在方法内部的变量，必须声明和初始化值。","categories":[{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"数据类型","slug":"数据类型","permalink":"https://qz1314233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}]},{"title":"Java的两大类数据类型","slug":"每日java","date":"2022-03-10T03:21:45.109Z","updated":"2022-03-10T03:27:15.441Z","comments":true,"path":"2022/03/10/每日java/","link":"","permalink":"https://qz1314233.github.io/2022/03/10/%E6%AF%8F%E6%97%A5java/","excerpt":"","text":"数据类型 基本数据类型（Primive Type） 数值类型 整数类型 byte：占1个字节范围 -128~127 short：占2个字节范围 -32768~32767 int（最常用）：占4个字节范围 -2147483648~2147483647（约正负21亿） long（在数字后加L区分）：占8个字节范围 （太长，约-9x1018~9x1018) 以上数值范围均可以在对应的类的源码中找到 浮点类型 float（在数字后加F区分）：占4个字节 double：占8个字节 浮点数是有限、离散的，在数位较多时只能近似表示但不能完全相等，所以**最好完全避免浮点数之间的比较** 字符类型 char：占2个字节 字符的本质是数字（ASCII码） 编码从U0000到UFFFF（16进制） 转义字符 \\t 水平制表符 \\n 换行符 ，将当前位置移到下一行行开头 \\\\ 表示一个“\\” （\\&quot;,\\'同理） boolean类型 boolean：占1位，其值只有true和false 引用数据类型（Reference Type） 类 接口 数组","categories":[{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"数据类型","slug":"数据类型","permalink":"https://qz1314233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}]},{"title":"3月我来了！初入Blog","slug":"hello-world","date":"2022-03-09T10:48:08.705Z","updated":"2022-03-10T00:57:51.600Z","comments":true,"path":"2022/03/09/hello-world/","link":"","permalink":"https://qz1314233.github.io/2022/03/09/hello-world/","excerpt":"","text":"欢迎来到乔治的恐龙窝，此博客用于记录开发过程，以及发布结果！ 快速开始 简言 人生的高度，一半始于努力，一半源自选择，相信每一次的巧合，都必定有你的努力！早安！新的一月，加油！ 内容板块 1.MC项目开发进度及心得 2.在校课程知识结构 3.算法 4.日记（看心情写） 5.项目工程介绍 小结 12print(&quot;hello world&quot;) System.out.println(&quot;hello wold&quot;)","categories":[{"name":"毫无用处","slug":"毫无用处","permalink":"https://qz1314233.github.io/categories/%E6%AF%AB%E6%97%A0%E7%94%A8%E5%A4%84/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://qz1314233.github.io/tags/%E6%B5%8B%E8%AF%95/"}]}],"categories":[{"name":"上机作业","slug":"上机作业","permalink":"https://qz1314233.github.io/categories/%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"},{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"},{"name":"乔治的Java笔记","slug":"乔治的Java笔记","permalink":"https://qz1314233.github.io/categories/%E4%B9%94%E6%B2%BB%E7%9A%84Java%E7%AC%94%E8%AE%B0/"},{"name":"毫无用处","slug":"毫无用处","permalink":"https://qz1314233.github.io/categories/%E6%AF%AB%E6%97%A0%E7%94%A8%E5%A4%84/"}],"tags":[{"name":"C#上机作业","slug":"C-上机作业","permalink":"https://qz1314233.github.io/tags/C-%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A/"},{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"包机制、","slug":"包机制、","permalink":"https://qz1314233.github.io/tags/%E5%8C%85%E6%9C%BA%E5%88%B6%E3%80%81/"},{"name":"JavaDoc","slug":"JavaDoc","permalink":"https://qz1314233.github.io/tags/JavaDoc/"},{"name":"Scanner","slug":"Scanner","permalink":"https://qz1314233.github.io/tags/Scanner/"},{"name":"运算符","slug":"运算符","permalink":"https://qz1314233.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"},{"name":"算法","slug":"算法","permalink":"https://qz1314233.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://qz1314233.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"数据类型","slug":"数据类型","permalink":"https://qz1314233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"name":"测试","slug":"测试","permalink":"https://qz1314233.github.io/tags/%E6%B5%8B%E8%AF%95/"}]}