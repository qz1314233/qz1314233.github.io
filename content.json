{"meta":{"title":"乔治的恐龙窝","subtitle":"","description":"","author":"乔治","url":"https://qz1314233.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-03-09T13:37:34.475Z","updated":"2022-03-09T12:51:30.791Z","comments":false,"path":"/404.html","permalink":"https://qz1314233.github.io/404.html","excerpt":"","text":""},{"title":"分类","date":"2022-03-09T12:51:30.793Z","updated":"2022-03-09T12:51:30.793Z","comments":false,"path":"categories/index.html","permalink":"https://qz1314233.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-03-09T13:25:33.579Z","updated":"2022-03-09T12:51:30.792Z","comments":false,"path":"books/index.html","permalink":"https://qz1314233.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-03-09T13:36:15.972Z","updated":"2022-03-09T13:36:15.972Z","comments":false,"path":"about/index.html","permalink":"https://qz1314233.github.io/about/index.html","excerpt":"","text":"个人详细介绍哈哈哈哈哈哈卧槽 太懒了没写"},{"title":"项目仓库","date":"2022-03-10T00:23:53.966Z","updated":"2022-03-10T00:23:53.966Z","comments":false,"path":"repository/index.html","permalink":"https://qz1314233.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-03-09T12:51:30.793Z","updated":"2022-03-09T12:51:30.793Z","comments":false,"path":"tags/index.html","permalink":"https://qz1314233.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-03-09T12:51:30.793Z","updated":"2022-03-09T12:51:30.793Z","comments":true,"path":"links/index.html","permalink":"https://qz1314233.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"Java的包机制、JavaDoc命令、用户交互Scanner","slug":"笔记3","date":"2022-03-14T00:03:51.268Z","updated":"2022-03-14T00:07:30.171Z","comments":true,"path":"2022/03/14/笔记3/","link":"","permalink":"https://qz1314233.github.io/2022/03/14/%E7%AC%94%E8%AE%B03/","excerpt":"","text":"包机制 包的本质，就是文件夹 一般用公司域名倒置作为包名 &quot;*&quot;通配符，可导入包中所有类 JavaDoc JavaDoc命令是用来生成自己的API文档的 参数信息 @author：作者名 @version：版本号 @since：jdk版本 @param：参数 @return：返回值 @throws：异常 用cmd命令生成或用IDEA生成javadoc文档 用户交互：Scanner 通过Scanner类来获取用户的输入 123Scanner sc = new Scanner(System.in);//创建一个Scanner对象，启动输入...sc.close();//关闭，释放资源 两种接收方式：next()、nextLine() next(): 空格分隔，一个一个扫描** 一定要读取到有效字符后才可以结束输入 对输入有效字符之前的空白，next()方法会自动将其去掉 只有输入有效字符后才会将后面的空白作为分隔符或结束符 next()不能得到带有空格的字符串 nextLine(): 回车键分隔，一行一行扫描 以Enter键分隔，即nextLine()返回的是输入回车键之前所有的字符 可以获得带空格的字符串 12sc.next();//获取输入，空格分隔sc.nextLine();//获取输入，Enter分隔 数值操作 1234//Scanner里面的一些方法：nextInt();nextFloat();... 在IDEA的左下角点击Structure可以查看类的结构，一般用来查看源码里的方法","categories":[{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"包机制、","slug":"包机制、","permalink":"https://qz1314233.github.io/tags/%E5%8C%85%E6%9C%BA%E5%88%B6%E3%80%81/"},{"name":"JavaDoc","slug":"JavaDoc","permalink":"https://qz1314233.github.io/tags/JavaDoc/"},{"name":"Scanner","slug":"Scanner","permalink":"https://qz1314233.github.io/tags/Scanner/"}]},{"title":"Java运算符","slug":"笔记2","date":"2022-03-11T04:23:42.968Z","updated":"2022-03-11T04:27:13.191Z","comments":true,"path":"2022/03/11/笔记2/","link":"","permalink":"https://qz1314233.github.io/2022/03/11/%E7%AC%94%E8%AE%B02/","excerpt":"","text":"运算符 二元运算符 四则运算 +、-、*、/ 除法可能出现浮点数，需要先转换为double 不同数值类型进行运算时，有double结果为double，否则有long结果为long，否则结果都为int 关系运算 &gt;,&lt;,==,!=…(返回结果是布尔值true或false) 模运算 % 即求余运算 一元运算符 ++，–自增，自减 a++ 先操作，再自增 ++a 先自增，再操作 工具类Math类中的pow幂运算 逻辑运算符 与（&amp;）、 或（|）、 非(!) 短路运算 短路与（&amp;&amp;）：若前面布尔值为假，则直接返回false，不进行后面的操作 短路或（||）：若前面布尔值为真，则直接返回true，不进行后面的操作 用短路运算能 减少不必要的运算过程 位运算 &amp;|~(为异或位运算，不同为1，相同为0) &lt;&lt;相当于*2，&gt;&gt;相当于/2, 位运算效率极高！ 字符串拼接符 + 当&quot;+&quot;左右有一个为String类型时，另一个也会转换为String类型进行拼接 三目运算符 x ？y：z 若x为真，则返回y，否则返回z –&gt; x==true ？ –&gt; y（是的）：z（不是）","categories":[{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"运算符","slug":"运算符","permalink":"https://qz1314233.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"}]},{"title":"动态规划·算法","slug":"算法1","date":"2022-03-10T15:54:19.589Z","updated":"2022-03-10T15:54:13.761Z","comments":true,"path":"2022/03/10/算法1/","link":"","permalink":"https://qz1314233.github.io/2022/03/10/%E7%AE%97%E6%B3%951/","excerpt":"","text":"动态规划 N阶矩阵连乘问题 规模为1时，不用运算，初始状态,乘法次数为0&gt;第一个阶段:依据初始状态,计算2个矩阵相乘的最少乘法次数,做出决策。 第二个阶段:依据第一阶段计算的结果计算3个矩阵相乘的最少乘法次数,做决策。 以此类推,直到最后一个阶段得到n个矩阵连乘最少计算次数，做决策。 动态规划的基本思想 (1）经分解得到的各个子问题往往不是相互独立的。&gt;比如:A:AzA3与AzA3A4有共同的子问题A2A3 (2)在求解过程中,将已解决的子问题的最优值进行保存，在需要时可以轻松找出。 (3）通常采用表的形式记录子问题的最优值,即在实际求解过程中，一旦某个子问题被计算过，不管该问题以后是否用得到，都将其计算结果填入该表，需要的时候就从表中找出该子问题的最优值。 (4）根据最优值,记录最优决策,构造最优解。 动态规划的解题步骤 (1）分析最优解的性质,刻画最优解的结构特征——考察是否适合采用动态规划法。 (2）递归定义最优值（即建立递归式或动态规划方程）。 (3）以自底向上的方式计算出最优值,并记录相关信息。 问题 最长公共子序列问题","categories":[{"name":"乔治的Java笔记","slug":"乔治的Java笔记","permalink":"https://qz1314233.github.io/categories/%E4%B9%94%E6%B2%BB%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://qz1314233.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://qz1314233.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"Java的数据类型要点","slug":"每日java2","date":"2022-03-10T15:53:23.058Z","updated":"2022-03-10T15:53:19.631Z","comments":true,"path":"2022/03/10/每日java2/","link":"","permalink":"https://qz1314233.github.io/2022/03/10/%E6%AF%8F%E6%97%A5java2/","excerpt":"","text":"类型转换 强制转换：高到低 （类型）变量名 自动转换：低到高 注意点： 不能对boolean类型进行转换 不能把对象转换为不相干的类型 高容量到低容量，要强制转换 强制转换可能会出现内存溢出或精度问题 JDK7: 可以在数字间加“_”把数位较多的数分隔开 变量 三种作用域 类变量：从属于类，加上static关键字，可以直接使用 实例变量：从属于对象，如果不进行初始化，则会使用默认值 0，0.0，false，null； 局部变量：作用域在方法内部的变量，必须声明和初始化值。","categories":[{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"数据类型","slug":"数据类型","permalink":"https://qz1314233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}]},{"title":"Java的两大类数据类型","slug":"每日java","date":"2022-03-10T03:21:45.109Z","updated":"2022-03-10T03:27:15.441Z","comments":true,"path":"2022/03/10/每日java/","link":"","permalink":"https://qz1314233.github.io/2022/03/10/%E6%AF%8F%E6%97%A5java/","excerpt":"","text":"数据类型 基本数据类型（Primive Type） 数值类型 整数类型 byte：占1个字节范围 -128~127 short：占2个字节范围 -32768~32767 int（最常用）：占4个字节范围 -2147483648~2147483647（约正负21亿） long（在数字后加L区分）：占8个字节范围 （太长，约-9x1018~9x1018) 以上数值范围均可以在对应的类的源码中找到 浮点类型 float（在数字后加F区分）：占4个字节 double：占8个字节 浮点数是有限、离散的，在数位较多时只能近似表示但不能完全相等，所以**最好完全避免浮点数之间的比较** 字符类型 char：占2个字节 字符的本质是数字（ASCII码） 编码从U0000到UFFFF（16进制） 转义字符 \\t 水平制表符 \\n 换行符 ，将当前位置移到下一行行开头 \\\\ 表示一个“\\” （\\&quot;,\\'同理） boolean类型 boolean：占1位，其值只有true和false 引用数据类型（Reference Type） 类 接口 数组","categories":[{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"数据类型","slug":"数据类型","permalink":"https://qz1314233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}]},{"title":"3月我来了！初入Blog","slug":"hello-world","date":"2022-03-09T10:48:08.705Z","updated":"2022-03-10T00:57:51.600Z","comments":true,"path":"2022/03/09/hello-world/","link":"","permalink":"https://qz1314233.github.io/2022/03/09/hello-world/","excerpt":"","text":"欢迎来到乔治的恐龙窝，此博客用于记录开发过程，以及发布结果！ 快速开始 简言 人生的高度，一半始于努力，一半源自选择，相信每一次的巧合，都必定有你的努力！早安！新的一月，加油！ 内容板块 1.MC项目开发进度及心得 2.在校课程知识结构 3.算法 4.日记（看心情写） 5.项目工程介绍 小结 12print(&quot;hello world&quot;) System.out.println(&quot;hello wold&quot;)","categories":[{"name":"毫无用处","slug":"毫无用处","permalink":"https://qz1314233.github.io/categories/%E6%AF%AB%E6%97%A0%E7%94%A8%E5%A4%84/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://qz1314233.github.io/tags/%E6%B5%8B%E8%AF%95/"}]}],"categories":[{"name":"Zeta的Java笔记","slug":"Zeta的Java笔记","permalink":"https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"},{"name":"乔治的Java笔记","slug":"乔治的Java笔记","permalink":"https://qz1314233.github.io/categories/%E4%B9%94%E6%B2%BB%E7%9A%84Java%E7%AC%94%E8%AE%B0/"},{"name":"毫无用处","slug":"毫无用处","permalink":"https://qz1314233.github.io/categories/%E6%AF%AB%E6%97%A0%E7%94%A8%E5%A4%84/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://qz1314233.github.io/tags/JAVA/"},{"name":"包机制、","slug":"包机制、","permalink":"https://qz1314233.github.io/tags/%E5%8C%85%E6%9C%BA%E5%88%B6%E3%80%81/"},{"name":"JavaDoc","slug":"JavaDoc","permalink":"https://qz1314233.github.io/tags/JavaDoc/"},{"name":"Scanner","slug":"Scanner","permalink":"https://qz1314233.github.io/tags/Scanner/"},{"name":"运算符","slug":"运算符","permalink":"https://qz1314233.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"},{"name":"算法","slug":"算法","permalink":"https://qz1314233.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://qz1314233.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"数据类型","slug":"数据类型","permalink":"https://qz1314233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"name":"测试","slug":"测试","permalink":"https://qz1314233.github.io/tags/%E6%B5%8B%E8%AF%95/"}]}