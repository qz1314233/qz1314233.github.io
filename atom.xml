<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乔治的恐龙窝</title>
  
  
  <link href="https://qz1314233.github.io/atom.xml" rel="self"/>
  
  <link href="https://qz1314233.github.io/"/>
  <updated>2022-03-14T00:03:39.245Z</updated>
  <id>https://qz1314233.github.io/</id>
  
  <author>
    <name>乔治</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java的包机制、JavaDoc命令、用户交互Scanner</title>
    <link href="https://qz1314233.github.io/2022/03/14/%E7%AC%94%E8%AE%B03/"/>
    <id>https://qz1314233.github.io/2022/03/14/%E7%AC%94%E8%AE%B03/</id>
    <published>2022-03-14T00:03:51.268Z</published>
    <updated>2022-03-14T00:03:39.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包机制"><a class="markdownIt-Anchor" href="#包机制"></a> 包机制</h2><p>包的本质，就是文件夹</p><p><strong>一般用公司域名倒置作为包名</strong></p><p>&quot;*&quot;通配符，可导入包中所有类</p><h2 id="javadoc"><a class="markdownIt-Anchor" href="#javadoc"></a> JavaDoc</h2><p>JavaDoc命令是用来生成自己的API文档的</p><blockquote><p>参数信息</p><ol><li>@author：作者名</li><li>@version：版本号</li><li>@since：jdk版本</li><li>@param：参数</li><li>@return：返回值</li><li>@throws：异常</li></ol></blockquote><p>用cmd命令生成或用IDEA生成javadoc文档</p><h2 id="用户交互scanner"><a class="markdownIt-Anchor" href="#用户交互scanner"></a> 用户交互：Scanner</h2><p>通过Scanner类来获取用户的输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//创建一个Scanner对象，启动输入</span></span><br><span class="line">...</span><br><span class="line">sc.close();<span class="comment">//关闭，释放资源</span></span><br></pre></td></tr></table></figure><h3 id="两种接收方式next-nextline"><a class="markdownIt-Anchor" href="#两种接收方式next-nextline"></a> 两种接收方式：next()、nextLine()</h3><p>next():       空格分隔，一个一个扫描**</p><ol><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效字符之前的空白，next()方法会自动将其去掉</li><li>只有输入有效字符后才会将后面的空白作为分隔符或结束符</li><li><strong>next()不能得到带有空格的字符串</strong></li></ol><p>nextLine():     <strong>回车键分隔，一行一行扫描</strong></p><ol><li>以Enter键分隔，即nextLine()返回的是输入回车键之前所有的字符</li><li>可以获得带空格的字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc.next();<span class="comment">//获取输入，空格分隔</span></span><br><span class="line">sc.nextLine();<span class="comment">//获取输入，Enter分隔</span></span><br></pre></td></tr></table></figure><h3 id="数值操作"><a class="markdownIt-Anchor" href="#数值操作"></a> 数值操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Scanner里面的一些方法：</span></span><br><span class="line">nextInt();</span><br><span class="line">nextFloat();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>在IDEA的左下角点击<strong>Structure</strong>可以查看类的结构，一般用来查看源码里的方法</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;包机制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#包机制&quot;&gt;&lt;/a&gt; 包机制&lt;/h2&gt;
&lt;p&gt;包的本质，就是文件夹&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般用公司域名倒置作为包名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;*&amp;quot;</summary>
      
    
    
    
    <category term="Zeta的Java笔记" scheme="https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="https://qz1314233.github.io/tags/JAVA/"/>
    
    <category term="包机制、JavaDoc、Scanner" scheme="https://qz1314233.github.io/tags/%E5%8C%85%E6%9C%BA%E5%88%B6%E3%80%81JavaDoc%E3%80%81Scanner/"/>
    
  </entry>
  
  <entry>
    <title>Java运算符</title>
    <link href="https://qz1314233.github.io/2022/03/11/%E7%AC%94%E8%AE%B02/"/>
    <id>https://qz1314233.github.io/2022/03/11/%E7%AC%94%E8%AE%B02/</id>
    <published>2022-03-11T04:23:42.968Z</published>
    <updated>2022-03-11T04:27:13.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h2><h3 id="二元运算符"><a class="markdownIt-Anchor" href="#二元运算符"></a> 二元运算符</h3><h4 id="四则运算"><a class="markdownIt-Anchor" href="#四则运算"></a> 四则运算</h4><p>+、-、*、/</p><p>除法可能出现浮点数，需要先转换为double</p><p>不同数值类型进行运算时，有double结果为double，否则有long结果为long，否则结果都为int</p><h4 id="关系运算"><a class="markdownIt-Anchor" href="#关系运算"></a> 关系运算</h4><p>&gt;,&lt;,==,!=…(返回结果是布尔值true或false)</p><h4 id="模运算"><a class="markdownIt-Anchor" href="#模运算"></a> 模运算</h4><p>% 即求余运算</p><h3 id="一元运算符"><a class="markdownIt-Anchor" href="#一元运算符"></a> 一元运算符</h3><p>++，–自增，自减</p><p>a++ 先操作，再自增</p><p>++a 先自增，再操作</p><p><strong>工具类Math类中的pow幂运算</strong></p><h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h3><p>与（&amp;）、 或（|）、 非(!)</p><h3 id="短路运算"><a class="markdownIt-Anchor" href="#短路运算"></a> 短路运算</h3><p>短路与（&amp;&amp;）：若前面布尔值为假，则直接返回false，不进行后面的操作</p><p>短路或（||）：若前面布尔值为真，则直接返回true，不进行后面的操作</p><p>用短路运算能 减少不必要的运算过程</p><h3 id="位运算"><a class="markdownIt-Anchor" href="#位运算"></a> 位运算</h3><p>&amp;|<sup>~(</sup>为异或位运算，不同为1，相同为0)</p><p>&lt;&lt;相当于*2，&gt;&gt;相当于/2,</p><p>位运算效率极高！</p><h3 id="字符串拼接符"><a class="markdownIt-Anchor" href="#字符串拼接符"></a> 字符串拼接符</h3><p>+</p><p>当&quot;+&quot;左右有一个为String类型时，另一个也会转换为String类型进行拼接</p><h3 id="三目运算符"><a class="markdownIt-Anchor" href="#三目运算符"></a> 三目运算符</h3><p>x ？y：z</p><p>若x为真，则返回y，否则返回z</p><p>–&gt; x==true ？</p><p>–&gt; y（是的）：z（不是）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;运算符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#运算符&quot;&gt;&lt;/a&gt; 运算符&lt;/h2&gt;
&lt;h3 id=&quot;二元运算符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#二元运算符&quot;&gt;&lt;/a&gt; 二元运算符&lt;/h3</summary>
      
    
    
    
    <category term="Zeta的Java笔记" scheme="https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="https://qz1314233.github.io/tags/JAVA/"/>
    
    <category term="运算符" scheme="https://qz1314233.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>动态规划·算法</title>
    <link href="https://qz1314233.github.io/2022/03/10/%E7%AE%97%E6%B3%951/"/>
    <id>https://qz1314233.github.io/2022/03/10/%E7%AE%97%E6%B3%951/</id>
    <published>2022-03-10T15:54:19.589Z</published>
    <updated>2022-03-10T15:54:13.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h1><h2 id="n阶矩阵连乘问题"><a class="markdownIt-Anchor" href="#n阶矩阵连乘问题"></a> N阶矩阵连乘问题</h2><blockquote><p>规模为1时，不用运算，初始状态,乘法次数为0&gt;第一个阶段:依据初始状态,计算2个矩阵相乘的最少乘法次数,做出决策。<br />第二个阶段:依据第一阶段计算的结果计算3个矩阵相乘的最少乘法次数,做决策。<br />以此类推,直到最后一个阶段得到n个矩阵连乘最少计算次数，做决策。</p></blockquote><h2 id="动态规划的基本思想"><a class="markdownIt-Anchor" href="#动态规划的基本思想"></a> 动态规划的基本思想</h2><blockquote><p>(1）经分解得到的各个子问题往往不是相互独立的。&gt;比如:A:AzA3与AzA3A4有共同的子问题A2A3<br />(2)在求解过程中,将已解决的子问题的最优值进行保存，在需要时可以轻松找出。<br />(3）通常采用表的形式记录子问题的最优值,即在实际求解过程中，一旦某个子问题被计算过，不管该问题以后是否用得到，都将其计算结果填入该表，需要的时候就从表中找出该子问题的最优值。<br />(4）根据最优值,记录最优决策,构造最优解。</p></blockquote><h2 id="动态规划的解题步骤"><a class="markdownIt-Anchor" href="#动态规划的解题步骤"></a> 动态规划的解题步骤</h2><blockquote><p>(1）分析最优解的性质,刻画最优解的结构特征——考察是否适合采用动态规划法。<br />(2）递归定义最优值（即建立递归式或动态规划方程）。<br />(3）以自底向上的方式计算出最优值,并记录相关信息。</p></blockquote><h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><h2 id="最长公共子序列问题"><a class="markdownIt-Anchor" href="#最长公共子序列问题"></a> 最长公共子序列问题</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#动态规划&quot;&gt;&lt;/a&gt; 动态规划&lt;/h1&gt;
&lt;h2 id=&quot;n阶矩阵连乘问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#n阶矩阵连乘问题&quot;&gt;&lt;/a&gt; </summary>
      
    
    
    
    <category term="乔治的Java笔记" scheme="https://qz1314233.github.io/categories/%E4%B9%94%E6%B2%BB%E7%9A%84Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="https://qz1314233.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://qz1314233.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java的数据类型要点</title>
    <link href="https://qz1314233.github.io/2022/03/10/%E6%AF%8F%E6%97%A5java2/"/>
    <id>https://qz1314233.github.io/2022/03/10/%E6%AF%8F%E6%97%A5java2/</id>
    <published>2022-03-10T15:53:23.058Z</published>
    <updated>2022-03-10T15:53:19.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> <strong>类型转换</strong></h2><p>强制转换：高到低 （类型）变量名</p><p>自动转换：低到高</p><p>注意点：</p><p>不能对boolean类型进行转换<br />不能把对象转换为不相干的类型<br />高容量到低容量，要强制转换<br />强制转换可能会出现内存溢出或精度问题<br />JDK7: 可以在数字间加“_”把数位较多的数分隔开</p><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><p>三种作用域<br />类变量：从属于类，加上static关键字，可以直接使用</p><p>实例变量：从属于对象，如果不进行初始化，则会使用默认值 0，0.0，false，null；</p><p>局部变量：作用域在方法内部的变量，必须声明和初始化值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;类型转换&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类型转换&quot;&gt;&lt;/a&gt; &lt;strong&gt;类型转换&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;强制转换：高到低 （类型）变量名&lt;/p&gt;
&lt;p&gt;自动转换：低到高&lt;/p&gt;
&lt;p&gt;注意点：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Zeta的Java笔记" scheme="https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="https://qz1314233.github.io/tags/JAVA/"/>
    
    <category term="数据类型" scheme="https://qz1314233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java的两大类数据类型</title>
    <link href="https://qz1314233.github.io/2022/03/10/%E6%AF%8F%E6%97%A5java/"/>
    <id>https://qz1314233.github.io/2022/03/10/%E6%AF%8F%E6%97%A5java/</id>
    <published>2022-03-10T03:21:45.109Z</published>
    <updated>2022-03-10T03:27:15.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><h3 id="基本数据类型primive-type"><a class="markdownIt-Anchor" href="#基本数据类型primive-type"></a> 基本数据类型（Primive Type）</h3><h4 id="数值类型"><a class="markdownIt-Anchor" href="#数值类型"></a> 数值类型</h4><h5 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型"></a> 整数类型</h5><p>byte：占1个字节范围    -128~127</p><p>short：占2个字节范围    -32768~32767</p><p>int（最常用）：占4个字节范围    -2147483648~2147483647（约正负21亿）</p><p>long（在数字后加L区分）：占8个字节范围    （太长，约-9x10<sup>18~9x10</sup>18)</p><p><strong>以上数值范围均可以在对应的类的源码中找到</strong></p><h5 id="浮点类型"><a class="markdownIt-Anchor" href="#浮点类型"></a> 浮点类型</h5><p>float（在数字后加F区分）：占4个字节</p><p>double：占8个字节</p><p>浮点数是有限、离散的，在数位较多时只能近似表示但不能完全相等，所以**<u>最好完全避免浮点数之间的比较</u>**</p><h5 id="字符类型"><a class="markdownIt-Anchor" href="#字符类型"></a> 字符类型</h5><p>char：占2个字节</p><p><strong>字符的本质是数字（ASCII码）</strong></p><p>编码从U0000到UFFFF（16进制）</p><h6 id="转义字符"><a class="markdownIt-Anchor" href="#转义字符"></a> <strong>转义字符</strong></h6><p>\t 水平制表符</p><p>\n 换行符 ，将当前位置移到下一行行开头</p><p>\\ 表示一个“\” （\&quot;,\'同理）</p><h4 id="boolean类型"><a class="markdownIt-Anchor" href="#boolean类型"></a> boolean类型</h4><p>boolean：占1位，其值只有true和false</p><h3 id="引用数据类型reference-type"><a class="markdownIt-Anchor" href="#引用数据类型reference-type"></a> 引用数据类型（Reference Type）</h3><p>类</p><p>接口</p><p>数组</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据类型&quot;&gt;&lt;/a&gt; 数据类型&lt;/h2&gt;
&lt;h3 id=&quot;基本数据类型primive-type&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本数据类</summary>
      
    
    
    
    <category term="Zeta的Java笔记" scheme="https://qz1314233.github.io/categories/Zeta%E7%9A%84Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="https://qz1314233.github.io/tags/JAVA/"/>
    
    <category term="数据类型" scheme="https://qz1314233.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>3月我来了！初入Blog</title>
    <link href="https://qz1314233.github.io/2022/03/09/hello-world/"/>
    <id>https://qz1314233.github.io/2022/03/09/hello-world/</id>
    <published>2022-03-09T10:48:08.705Z</published>
    <updated>2022-03-10T00:57:51.600Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到乔治的恐龙窝，此博客用于记录开发过程，以及发布结果！</p><h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><h3 id="简言"><a class="markdownIt-Anchor" href="#简言"></a> 简言</h3><p>人生的高度，一半始于努力，一半源自选择，相信每一次的巧合，都必定有你的努力！早安！新的一月，加油！</p><h3 id="内容板块"><a class="markdownIt-Anchor" href="#内容板块"></a> 内容板块</h3><p>1.MC项目开发进度及心得<br />2.在校课程知识结构<br />3.算法<br />4.日记（看心情写）<br />5.项目工程介绍</p><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>) </span><br><span class="line">System.out.println(<span class="string">&quot;hello wold&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到乔治的恐龙窝，此博客用于记录开发过程，以及发布结果！&lt;/p&gt;
&lt;h2 id=&quot;快速开始&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#快速开始&quot;&gt;&lt;/a&gt; 快速开始&lt;/h2&gt;
&lt;h3 id=&quot;简言&quot;&gt;&lt;a class=&quot;markdownI</summary>
      
    
    
    
    <category term="毫无用处" scheme="https://qz1314233.github.io/categories/%E6%AF%AB%E6%97%A0%E7%94%A8%E5%A4%84/"/>
    
    
    <category term="测试" scheme="https://qz1314233.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
